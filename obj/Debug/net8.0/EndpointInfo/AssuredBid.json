{
  "openapi": "3.0.1",
  "info": {
    "title": "AssuredBid.API",
    "description": "AssuredBid API that Generates tenders",
    "version": "v1"
  },
  "paths": {
    "/api/Admin/register": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Registers an admin and sends a verification token.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/verify-admin": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Verifies the admin with the token and finalizes registration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAdminDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAdminDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAdminDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/login": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Logs in an admin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/logout": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Logs out the admin.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/send-reset-password-token": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Sends a reset password token to the admin's email.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/verify-reset-token": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Verifies the token before allowing password reset.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyResetTokenDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyResetTokenDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyResetTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/set-new-password": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Allows setting a new password only if the token was verified.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetNewPasswordDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetNewPasswordDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetNewPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/search/{query}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "This Endpoint is used to fetch users in database using fullname or EmailAddress",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsersPage"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsersPage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsersPage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "This Endpoint is used to get user by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UsersPage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersPage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersPage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "This Endpoint is used to Update/edit existing User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersPage"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersPage"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UsersPage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "This Enpoint is to delete users using Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "This Endpoint is used to get all the users in the database",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsersPage"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsersPage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsersPage"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "This Endpoint is used to create new user",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UsersDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Registration/register": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Registers a new user and sends a verification code to their email.",
        "requestBody": {
          "description": "User registration details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification code sent successfully."
          },
          "400": {
            "description": "Invalid registration data."
          }
        }
      }
    },
    "/api/Registration/verify": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Verifies the email using the provided verification code.",
        "requestBody": {
          "description": "Verification code details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCodeDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCodeDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully."
          },
          "400": {
            "description": "Invalid verification data."
          }
        }
      }
    },
    "/api/Registration/complete-registration": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Completes user registration after email verification.",
        "requestBody": {
          "description": "User completion details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteRegistrationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteRegistrationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteRegistrationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registration completed successfully."
          },
          "400": {
            "description": "Invalid completion data."
          }
        }
      }
    },
    "/api/Registration/login": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Logs in the user and returns an authentication token.",
        "requestBody": {
          "description": "Login details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful."
          },
          "400": {
            "description": "Invalid login data."
          }
        }
      }
    },
    "/api/Registration/send-reset-password-otp": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Sends an OTP to the user's email for password reset.",
        "requestBody": {
          "description": "User email details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordOtpDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordOtpDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendResetPasswordOtpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully."
          },
          "400": {
            "description": "Invalid reset password data."
          }
        }
      }
    },
    "/api/Registration/verify-reset-otp": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Verifies the OTP for password reset.",
        "requestBody": {
          "description": "OTP verification details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyResetPasswordOtpDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyResetPasswordOtpDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyResetPasswordOtpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully."
          },
          "400": {
            "description": "Invalid OTP verification data."
          }
        }
      }
    },
    "/api/Registration/reset-password": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Resets the user's password after OTP verification.",
        "requestBody": {
          "description": "New password details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully."
          },
          "400": {
            "description": "Invalid password reset data."
          }
        }
      }
    },
    "/api/Registration/logout": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Logs out the user by blacklisting the current JWT token.",
        "responses": {
          "200": {
            "description": "Logout successful."
          },
          "400": {
            "description": "No token provided."
          },
          "401": {
            "description": "Token is invalid or already blacklisted."
          }
        }
      }
    },
    "/api/Registration/GetCompanyProfile": {
      "get": {
        "tags": [
          "Registration"
        ],
        "summary": "This endpoint is used to get company's profiles through the company number",
        "parameters": [
          {
            "name": "companyNumber",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tender/GetTendersWithLimitAndStages": {
      "get": {
        "tags": [
          "Tender"
        ],
        "summary": "get tenders with limit = number of tenders to generate and stage = tender",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stage",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tender/SendTendersToUsers": {
      "post": {
        "tags": [
          "Tender"
        ],
        "summary": "This Endpoint is used to push CreateTenders to the users",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stage",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tender/CreateNewTender": {
      "post": {
        "tags": [
          "Tender"
        ],
        "summary": "This Endpoint is used to create new tenders",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenderDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenderDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tender/GetTenderById": {
      "get": {
        "tags": [
          "Tender"
        ],
        "summary": "This Enpoint is used to get tender by its Id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tender/Update/{id}": {
      "put": {
        "tags": [
          "Tender"
        ],
        "summary": "This Endpoint is used to update tender by its Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenders"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenders"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenders"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tender/Delete/{id}": {
      "delete": {
        "tags": [
          "Tender"
        ],
        "summary": "This is used to delete tender by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Tender/GetAll": {
      "get": {
        "tags": [
          "Tender"
        ],
        "summary": "This Endpoint is used to get all the created tenders",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ],
        "operationId": "GetWeatherForecast",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CompleteRegistrationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "companyRegistrationNumber": {
            "type": "string",
            "nullable": true
          },
          "companyAddress": {
            "type": "string",
            "nullable": true
          },
          "streetNumber": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTenderDTO": {
        "type": "object",
        "properties": {
          "tenderId": {
            "type": "string",
            "nullable": true
          },
          "tenderTitle": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "budget": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTenders": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tenderId": {
            "type": "string",
            "nullable": true
          },
          "tenderTitle": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "budget": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "rememberMe": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RegisterModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "isSuperAdmin": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendResetPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendResetPasswordOtpDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetNewPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRegistrationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UsersDTO": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "isActive": {
            "type": "boolean"
          },
          "lastActive": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UsersPage": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "fullname": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "lastActive": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "VerifyAdminDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VerifyCodeDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VerifyResetPasswordOtpDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "otp": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VerifyResetTokenDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WeatherForecast": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "temperatureC": {
            "type": "integer",
            "format": "int32"
          },
          "temperatureF": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Enter 'Bearer' [space] and your valid token.\r\nExample: \"Bearer eyJhnbGciOrNwi78g...\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}